<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hanson的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://myhanson.com/"/>
  <updated>2018-03-02T02:44:39.058Z</updated>
  <id>http://myhanson.com/</id>
  
  <author>
    <name>Hanson Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PathToGo诞生记</title>
    <link href="http://myhanson.com/2018/03/02/PathToGo%E8%AF%9E%E7%94%9F%E8%AE%B0/"/>
    <id>http://myhanson.com/2018/03/02/PathToGo诞生记/</id>
    <published>2018-03-02T02:44:10.000Z</published>
    <updated>2018-03-02T02:44:39.058Z</updated>
    
    <content type="html"><![CDATA[<p>不知道大家在使用 Mac 的时候有没有这样的需求:</p><blockquote><p>经常需要获取当前文件或者文件夹的路径，并且复制到粘贴板。</p></blockquote><p>对于我来说经常有这种需要，然后我就从网上再结合自己的经验，找了好几种方法：</p><a id="more"></a><ol><li>右键-选择「显示简介」，然后在弹出的窗口里直接用鼠标拖动复制「位    置」里的路径。</li></ol><p>​    缺点：麻烦。</p><ol><li>把文件拖到浏览器，在浏览器地址栏复制路径。</li></ol><p>​    缺点：麻烦。</p><ol><li>打开终端，把文件拖入终端，终端会把文件路径打印出来，然后复制。</li></ol><p>​    缺点：麻烦。</p><ol><li>打开终端，cd到目标目录，然后输入 「pwd|pbcopy」就可以把路径复制到粘贴板。</li></ol><p>​    缺点：麻烦。</p><ol><li>选择文件，然后使用快捷键「Option + Command + C」。</li></ol><p>​    缺点：这个快捷键在更低版本的系统中好像不行，而且会与 Alfred 的一个快捷键冲突。还是麻烦。</p><ol><li>利用 Automator 来建立 Service 服务添加到右键服务菜单。</li></ol><p>​    缺点：麻烦。</p><p>以上几种方法都不能满足我的需求：</p><blockquote><ol><li>直观快捷</li><li>最好可以同时获取多个文件/文件夹的路径。</li></ol></blockquote><p>这时候我想起了很受大家欢迎的一款效率软件：Go2Shell</p><p><img src="https://user-gold-cdn.xitu.io/2018/3/2/161e49096986d7c9?w=262&amp;h=238&amp;f=png&amp;s=66436" alt=""></p><p>这款软件把它拖动到 Finder 的工具栏后，只要点击它就可以立刻启动终端，并且进入到当前的路径。</p><p>那可以不可以也做一款这样的 App 操作和 Go2Shell 类似，选中一个或多个文件或文件夹然后直接一点，就可以把当前选中的文件或文件夹路径复制到粘贴板呢？</p><p>然后经过一番折腾，『PathToGo』这款 App 就诞生了。</p><p><img src="https://user-gold-cdn.xitu.io/2018/3/2/161e490bc920f193?w=554&amp;h=438&amp;f=png&amp;s=151480" alt=""></p><p>虽然一开始是想直接利用 AppleScript 然后导出为应用程序的，可是看着 AppleScript 导出为应用程序的图标实在不够酷，就直接着手做了 PathToGo 这个简单的 Mac App。</p><p>下面看看实际体验效果吧：</p><p>首先是把『PathToGo』拖动到 Finder 的工具栏，记得是按住『command键』来进行拖动。</p><p><img src="https://user-gold-cdn.xitu.io/2018/3/2/161e491134c3825f?w=492&amp;h=214&amp;f=gif&amp;s=199517" alt=""></p><p>拖放好了之后，只需要选中你想要的一个或多个文件/文件夹，然后点击在工具栏上的『PathToGo』的图标，路径就已经复制到粘贴板上了，然后你就能愉快的 用 command+v 就能粘贴出你选择的文件的路径了。</p><p><img src="https://user-gold-cdn.xitu.io/2018/3/2/161e491402bb99d2?w=668&amp;h=366&amp;f=gif&amp;s=297785" alt=""></p><p>怎么样？是不是很方便快捷呢！<br><a href="https://github.com/HansonStudio/PathToGo" target="_blank" rel="external">PathToGo</a> 已经开源在 HansonStudio 的 Github 组织下了，大家可以在 Release 页面下载使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道大家在使用 Mac 的时候有没有这样的需求:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;经常需要获取当前文件或者文件夹的路径，并且复制到粘贴板。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于我来说经常有这种需要，然后我就从网上再结合自己的经验，找了好几种方法：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用SwiftGen管理UIImage等的String-based接口</title>
    <link href="http://myhanson.com/2017/12/08/%E7%94%A8SwiftGen%E7%AE%A1%E7%90%86UIImage%E7%AD%89%E7%9A%84String-based%E6%8E%A5%E5%8F%A3/"/>
    <id>http://myhanson.com/2017/12/08/用SwiftGen管理UIImage等的String-based接口/</id>
    <published>2017-12-08T07:15:21.000Z</published>
    <updated>2018-01-04T16:38:43.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题现状"><a href="#问题现状" class="headerlink" title="问题现状"></a>问题现状</h1><p>平时我们使用UIImage，UIFont，UIColor会遇到很多String-based的接口方法，比如常用的UIImage：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> testImage = <span class="type">UIImage</span>(named: <span class="string">"test"</span>)</div></pre></td></tr></table></figure></p><p>对于上面的代码，如果我们把 <code>test</code> 拼写错了，Xcode 并不会给出提示，只有当我们运行的时候才会收到报错，这样维护起来是有一定成本的。</p><a id="more"></a><h1 id="代码解决"><a href="#代码解决" class="headerlink" title="代码解决"></a>代码解决</h1><p>我们可以用类似如下的代码来解决这个问题：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit.UIImage</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ImageAssets</span> </span>&#123;</div><div class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> image: <span class="type">UIImage</span> &#123;</div><div class="line">        <span class="keyword">let</span> image = <span class="type">UIImage</span>(named: name)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> result = image <span class="keyword">else</span> &#123; <span class="built_in">fatalError</span>(<span class="string">"Unable to load image named <span class="subst">\(name)</span>."</span>) &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Assets</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">AppLogo</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> appLogo = <span class="type">ImageAssets</span>(name: <span class="string">"appLogo"</span>)</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> grayLogo = <span class="type">ImageAssets</span>(name: <span class="string">"gray_logo"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Arrow</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> arrowBlue = <span class="type">ImageAssets</span>(name: <span class="string">"arrow_blue"</span>)</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> arrowBrown = <span class="type">ImageAssets</span>(name: <span class="string">"arrow_brown"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ....</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span> </span>&#123;</div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>!(asset: <span class="type">ImageAssets</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(named: asset.name)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>利用上面的代码，我们在新建 UIImage 的时候就不需要去想图片的名字了，而且 Xcode 还会有代码提示：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> logo = <span class="type">Asset</span>.<span class="type">AppLogo</span>.appLogo.image</div><div class="line"><span class="keyword">let</span> grayLogo = <span class="type">UIImage</span>(asset: <span class="type">Asset</span>.<span class="type">AppLogo</span>.grayLogo)</div></pre></td></tr></table></figure></p><h1 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h1><p>虽然这种方法在调用的时候简单又安全了，但是项目中的图片往往比较多，如果手动编写维护那段代码也是需要不少精力，而且不能保证后续不会添加新的图片，这样每次都要去维护那段代码不免有些反人类。<br>那么现在就要介绍这个开源项目—  <a href="https://github.com/SwiftGen/SwiftGen" target="_blank" rel="external"><code>SwiftGen</code></a>了！</p><blockquote><p>SwiftGen is a tool to auto-generate Swift code for resources of your projects, to make them type-safe to use.</p></blockquote><p>利用 SwiftGen 可以帮我们生成这类的代码，但是 SwiftGen 默认生成的代码样式有时候并不是我们想要的，而且默认生成还会有针对 macOS 上的代码，比较好的是 SwiftGen 提供了模板的功能，我们可以按自己的需要来修改模板。</p><h1 id="集成-SwiftGen-在项目中"><a href="#集成-SwiftGen-在项目中" class="headerlink" title="集成 SwiftGen 在项目中"></a>集成 SwiftGen 在项目中</h1><p>SwiftGen 提供了好几种的集成方式，我这里只介绍我自己比较喜欢的方式：就是通过下载它的 Zip 文件解压到项目的目录中，然后通过添加 Run Script 来进行管理。这样可以基本做到不用操心代码。</p><h2 id="1-修改模板"><a href="#1-修改模板" class="headerlink" title="1.修改模板"></a>1.修改模板</h2><ul><li>到 SwiftGen仓库的Release页面下载最新的 <a href="https://github.com/SwiftGen/SwiftGen/releases" target="_blank" rel="external">swiftgen-5.2.1.zip</a></li><li>将解压后的 <code>swiftgen-5.2.1</code> 文件夹放到项目所在的目录下(存放<code>xxx.xcodeproj</code> 的位置)，可以将文件夹的名字改为<code>SwiftGen5</code>简洁一点。</li><li>进入到 <code>SwiftGen5</code> 里的 <code>templates/xcassets</code> 目录下，这里面可以看到有不少模板，我们选择 <code>swift4.stencil</code> 复制一份，命名为 <code>my-swift4.stencil</code> 然后我们就可以在里面修改我们自己想要的模板，我主要是想把 macOS 等其它平台的一些判断代码给删掉:<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Generated using SwiftGen, using my-templete created by Hanson</span></div><div class="line"></div><div class="line">&#123;% <span class="keyword">if</span> catalogs %&#125;</div><div class="line">&#123;% <span class="keyword">set</span> imageAlias %&#125;&#123;&#123;param.imageAliasName|<span class="keyword">default</span>:<span class="string">"Image"</span>&#125;&#125;&#123;% endset %&#125;</div><div class="line"><span class="keyword">import</span> UIKit.UIImage</div><div class="line"></div><div class="line"><span class="keyword">typealias</span> &#123;&#123;imageAlias&#125;&#125; = <span class="type">UIImage</span></div><div class="line"></div><div class="line">&#123;% <span class="keyword">set</span> enumName %&#125;&#123;&#123;param.enumName|<span class="keyword">default</span>:<span class="string">"Asset"</span>&#125;&#125;&#123;% endset %&#125;</div><div class="line">&#123;% <span class="keyword">set</span> imageType %&#125;&#123;&#123;param.imageTypeName|<span class="keyword">default</span>:<span class="string">"ImageAsset"</span>&#125;&#125;&#123;% endset %&#125;</div><div class="line"><span class="meta">@available</span>(*, deprecated, renamed: <span class="string">"&#123;&#123;imageType&#125;&#125;"</span>)</div><div class="line"><span class="keyword">typealias</span> &#123;&#123;enumName&#125;&#125;<span class="type">Type</span> = &#123;&#123;imageType&#125;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> </span>&#123;&#123;imageType&#125;&#125; &#123;</div><div class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> image: &#123;&#123;imageAlias&#125;&#125; &#123;</div><div class="line"><span class="keyword">let</span> bundle = <span class="type">Bundle</span>(<span class="keyword">for</span>: <span class="type">BundleToken</span>.<span class="keyword">self</span>)</div><div class="line"><span class="keyword">let</span> image = &#123;&#123;imageAlias&#125;&#125;(named: name, <span class="keyword">in</span>: bundle, compatibleWith: <span class="literal">nil</span>)</div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> result = image <span class="keyword">else</span> &#123; <span class="built_in">fatalError</span>(<span class="string">"Unable to load image named <span class="subst">\(name)</span>."</span>) &#125;</div><div class="line"><span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#123;% macro enumBlock assets sp %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% call casesBlock assets sp %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% <span class="keyword">if</span> not param.noAllValues %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% endif %&#125;</div><div class="line">&#123;% endmacro %&#125;</div><div class="line">&#123;% macro casesBlock assets sp %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% <span class="keyword">for</span> asset <span class="keyword">in</span> assets %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% <span class="keyword">if</span> asset.type == <span class="string">"color"</span> %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  <span class="keyword">static</span> <span class="keyword">let</span> &#123;&#123;asset.name|swiftIdentifier:<span class="string">"pretty"</span>|lowerFirstWord|escapeReservedKeywords&#125;&#125; = &#123;&#123;colorType&#125;&#125;(name: <span class="string">"&#123;&#123;asset.value&#125;&#125;"</span>)</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% elif asset.type == <span class="string">"image"</span> %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  <span class="keyword">static</span> <span class="keyword">let</span> &#123;&#123;asset.name|swiftIdentifier:<span class="string">"pretty"</span>|lowerFirstWord|escapeReservedKeywords&#125;&#125; = &#123;&#123;imageType&#125;&#125;(name: <span class="string">"&#123;&#123;asset.value&#125;&#125;"</span>)</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% elif asset.items %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  <span class="class"><span class="keyword">enum</span> </span>&#123;&#123;asset.name|swiftIdentifier:<span class="string">"pretty"</span>|escapeReservedKeywords&#125;&#125; &#123;</div><div class="line">&#123;&#123;sp&#125;&#125;    &#123;% <span class="keyword">set</span> sp2 %&#125;&#123;&#123;sp&#125;&#125;  &#123;% endset %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;    &#123;% call casesBlock asset.items sp2 %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% endif %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% endfor %&#125;</div><div class="line">&#123;% endmacro %&#125;</div><div class="line">&#123;% macro allValuesBlock assets <span class="built_in">filter</span> <span class="keyword">prefix</span> sp %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% <span class="keyword">for</span> asset <span class="keyword">in</span> assets %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% <span class="keyword">if</span> asset.type == <span class="built_in">filter</span> %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;&#123;<span class="keyword">prefix</span>&#125;&#125;&#123;&#123;asset.name|swiftIdentifier:<span class="string">"pretty"</span>|lowerFirstWord|escapeReservedKeywords&#125;&#125;,</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% elif asset.items %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% <span class="keyword">set</span> prefix2 %&#125;&#123;&#123;<span class="keyword">prefix</span>&#125;&#125;&#123;&#123;asset.name|swiftIdentifier:<span class="string">"pretty"</span>|escapeReservedKeywords&#125;&#125;.&#123;% endset %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% call allValuesBlock asset.items <span class="built_in">filter</span> prefix2 sp %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% endif %&#125;</div><div class="line">&#123;&#123;sp&#125;&#125;  &#123;% endfor %&#125;</div><div class="line">&#123;% endmacro %&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> </span>&#123;&#123;enumName&#125;&#125; &#123;</div><div class="line">&#123;% <span class="keyword">if</span> catalogs.<span class="built_in">count</span> &gt; <span class="number">1</span> %&#125;</div><div class="line">&#123;% <span class="keyword">for</span> catalog <span class="keyword">in</span> catalogs %&#125;</div><div class="line"><span class="class"><span class="keyword">enum</span> </span>&#123;&#123;catalog.name|swiftIdentifier:<span class="string">"pretty"</span>|escapeReservedKeywords&#125;&#125; &#123;</div><div class="line">&#123;% call enumBlock catalog.assets <span class="string">"  "</span> %&#125;</div><div class="line">&#125;</div><div class="line">&#123;% endfor %&#125;</div><div class="line">&#123;% <span class="keyword">else</span> %&#125;</div><div class="line">&#123;% call enumBlock catalogs.first.assets <span class="string">""</span> %&#125;</div><div class="line">&#123;% endif %&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> </span>&#123;&#123;imageAlias&#125;&#125; &#123;</div><div class="line"><span class="keyword">convenience</span> <span class="keyword">init</span>!(asset: &#123;&#123;imageType&#125;&#125;) &#123;</div><div class="line"><span class="keyword">let</span> bundle = <span class="type">Bundle</span>(<span class="keyword">for</span>: <span class="type">BundleToken</span>.<span class="keyword">self</span>)</div><div class="line"><span class="keyword">self</span>.<span class="keyword">init</span>(named: asset.name, <span class="keyword">in</span>: bundle, compatibleWith: <span class="literal">nil</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BundleToken</span> </span>&#123;&#125;</div><div class="line">&#123;% <span class="keyword">else</span> %&#125;</div><div class="line"><span class="comment">// No assets found</span></div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="2-建立RunScript"><a href="#2-建立RunScript" class="headerlink" title="2.建立RunScript"></a>2.建立RunScript</h2><ul><li><p>在<code>Xcode</code>中，进入到项目的<code>Target</code>，选择<code>Build Phases</code>,然后点击左上角的 <code>+</code> 号后点击 <code>New Run Script Phase</code>在新建的RunScript里添加如下内容：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">which</span> <span class="string">"<span class="variable">$PROJECT_DIR</span>"</span>/SwiftGen5/bin/swiftgen &gt;/dev/null;</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">set</span> -e</div><div class="line"><span class="string">"<span class="variable">$PROJECT_DIR</span>"</span>/SwiftGen5/bin/swiftgen xcassets -t my-swift4 <span class="string">"<span class="variable">$PROJECT_DIR</span>/swiftGenExample/Assets.xcassets"</span> --output <span class="string">"<span class="variable">$PROJECT_DIR</span>/swiftGenExample/ImageCode/ImageAsset.swift"</span></div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"##run echo warning: SwiftGen not installed, download it from https://github.com/SwiftGen/SwiftGen"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><p>  这段 <code>Run Script</code> 作用就是利用 SwiftGen 生成代码后写入到 <code>ImageAsset.swift</code> 文件中。</p></li><li><p>Build 一下project，我们就可以在 <code>/swiftGenExample/ImageCode/</code> 目录下看到 <code>ImageAsset.swift</code>，此时该文件还没有被项目索引，所以把它拖进项目Xcode对应的目录下就行了，之后即使我们添加了新的图片或者删掉旧的图片，只要每次Build一下项目，代码就会自动更新了。</p></li></ul><p>下面是生成的 <code>ImageAsset.swift</code> 的代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ImageAsset.swift</span></div><div class="line"><span class="comment">// Generated using SwiftGen, using my-templete created by Hanson</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit.UIImage</div><div class="line"></div><div class="line"><span class="keyword">typealias</span> <span class="type">Image</span> = <span class="type">UIImage</span></div><div class="line"></div><div class="line"><span class="meta">@available</span>(*, deprecated, renamed: <span class="string">"ImageAsset"</span>)</div><div class="line"><span class="keyword">typealias</span> <span class="type">AssetType</span> = <span class="type">ImageAsset</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ImageAsset</span> </span>&#123;</div><div class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> image: <span class="type">Image</span> &#123;</div><div class="line">        <span class="keyword">let</span> bundle = <span class="type">Bundle</span>(<span class="keyword">for</span>: <span class="type">BundleToken</span>.<span class="keyword">self</span>)</div><div class="line">        <span class="keyword">let</span> image = <span class="type">Image</span>(named: name, <span class="keyword">in</span>: bundle, compatibleWith: <span class="literal">nil</span>)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> result = image <span class="keyword">else</span> &#123; <span class="built_in">fatalError</span>(<span class="string">"Unable to load image named <span class="subst">\(name)</span>."</span>) &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Asset</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> arrowBlue = <span class="type">ImageAsset</span>(name: <span class="string">"arrow_blue"</span>)</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> arrowBrown = <span class="type">ImageAsset</span>(name: <span class="string">"arrow_brown"</span>)</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> iconLeftBack = <span class="type">ImageAsset</span>(name: <span class="string">"icon_left_back"</span>)</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> startLogo = <span class="type">ImageAsset</span>(name: <span class="string">"start_logo"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Image</span> </span>&#123;</div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>!(asset: <span class="type">ImageAsset</span>) &#123;</div><div class="line">    <span class="keyword">let</span> bundle = <span class="type">Bundle</span>(<span class="keyword">for</span>: <span class="type">BundleToken</span>.<span class="keyword">self</span>)</div><div class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>(named: asset.name, <span class="keyword">in</span>: bundle, compatibleWith: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BundleToken</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这里只是利用了 <code>SwiftGen</code> 对于 <code>Image</code> 的部分。它还有其它的关于 <code>String</code> ，<code>StroyBoard</code>，<code>Font</code>等等的代码生成。原理基本相同，靠大家按需研究啦。</p><blockquote><p>到我的博客阅读：<a href="http://www.myhanson.com/2017/12/08/%E7%94%A8SwiftGen%E7%AE%A1%E7%90%86UIImage%E7%AD%89%E7%9A%84String-based%E6%8E%A5%E5%8F%A3/#more" target="_blank" rel="external">myhanson.com</a><br>本文Demo：<a href="https://github.com/zyphs21/SwiftGenExample" target="_blank" rel="external">SwiftGenExample</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题现状&quot;&gt;&lt;a href=&quot;#问题现状&quot; class=&quot;headerlink&quot; title=&quot;问题现状&quot;&gt;&lt;/a&gt;问题现状&lt;/h1&gt;&lt;p&gt;平时我们使用UIImage，UIFont，UIColor会遇到很多String-based的接口方法，比如常用的UIImage：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; testImage = &lt;span class=&quot;type&quot;&gt;UIImage&lt;/span&gt;(named: &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于上面的代码，如果我们把 &lt;code&gt;test&lt;/code&gt; 拼写错了，Xcode 并不会给出提示，只有当我们运行的时候才会收到报错，这样维护起来是有一定成本的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift 实现启动屏动画</title>
    <link href="http://myhanson.com/2017/12/08/Swift%20%E5%AE%9E%E7%8E%B0%E5%90%AF%E5%8A%A8%E5%B1%8F%E5%8A%A8%E7%94%BB/"/>
    <id>http://myhanson.com/2017/12/08/Swift 实现启动屏动画/</id>
    <published>2017-12-08T02:13:30.000Z</published>
    <updated>2017-12-22T02:05:53.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Github: <a href="https://github.com/zyphs21/SplashAnimate" target="_blank" rel="external">SplashAnimate</a></p></blockquote><h1 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h1><p>首先我们需要确定作为宣传的图片的宽高比，这个一般是与 UI 确定的。一般启动屏展示会有上下两部分，上面是宣传图片，下面是 App 的 Logo。</p><h1 id="实现基本思路："><a href="#实现基本思路：" class="headerlink" title="实现基本思路："></a>实现基本思路：</h1><p>在 LaunchScreen 结束后，在 AppDelegate 中将 rootViewController 指向展示广告用的 AdViewController，在AdViewController 中设置一段时间后自己销毁，并提供回调方法在 AppDelegate 中将 rootViewController 指向 App 真正的首页。</p><a id="more"></a><h1 id="实现细节："><a href="#实现细节：" class="headerlink" title="实现细节："></a>实现细节：</h1><p>新建一个 AdViewController 用于放置广告宣传等展示.注意有一个回调方法。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="comment">// 用于 AdViewController 销毁后的回调</span></div><div class="line">    <span class="keyword">var</span> completion: (() -&gt; <span class="type">Void</span>)?</div><div class="line"></div><div class="line">    <span class="keyword">var</span> adImage: <span class="type">UIImage</span>?</div><div class="line">    <span class="keyword">var</span> adView: <span class="type">UIImageView</span>?</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// ....</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 ViewDidLoad 方法中配置广告图,同时判断 iPhoneX的特殊情况<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">    <span class="keyword">var</span> adViewHeight = (<span class="number">1040</span> / <span class="number">720</span>) * screenWidth</div><div class="line">    <span class="keyword">var</span> imageName = <span class="string">"start_page"</span></div><div class="line">    <span class="keyword">if</span> <span class="type">UIDevice</span>.isiPhoneX() &#123;</div><div class="line">        adViewHeight = (<span class="number">1920</span> / <span class="number">1124</span>) * screenWidth</div><div class="line">        imageName = <span class="string">"start_page_x"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    adView = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: screenWidth, height: adViewHeight))</div><div class="line">    adView?.image = <span class="type">UIImage</span>(named: imageName)</div><div class="line">    adView?.contentMode = .scaleAspectFill</div><div class="line">    <span class="keyword">self</span>.view.addSubview(adView!)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> bottomHolderView = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: screenHeight-<span class="number">120</span>, width: screenWidth, height: <span class="number">120</span>))</div><div class="line">    <span class="keyword">self</span>.view.addSubview(bottomHolderView)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> logo = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: (screenWidth-<span class="number">120</span>)/<span class="number">2</span>, y: (<span class="number">120</span>-<span class="number">50</span>)/<span class="number">2</span>, width: <span class="number">120</span>, height: <span class="number">50</span>))</div><div class="line">    logo.image = <span class="type">UIImage</span>(named: <span class="string">"start_logo"</span>)</div><div class="line">    bottomHolderView.addSubview(logo)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> time: <span class="type">TimeInterval</span> = <span class="number">1.0</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + time) &#123;</div><div class="line">        <span class="keyword">self</span>.dismissAdView()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面代码中有几个注意的:</p><p>因为图片要撑满屏幕的宽度，所以宽度是固定的，根据图片的高宽比，算出图片实际应有的高度，这样图片可以在各个尺寸的 iPhone 中才不会因为拉伸而变形。但是因为 iPhoneX 特殊的宽高比，所以还是要为它特定一张图片，不然即使图片在 iPhoneX 上不变形，图片所占的高度会太小，或者顶部被刘海遮挡内容而不美观。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> adViewHeight = (<span class="number">1040</span> / <span class="number">720</span>) * screenWidth</div><div class="line"><span class="keyword">var</span> imageName = <span class="string">"start_page"</span></div><div class="line"><span class="keyword">if</span> <span class="type">UIDevice</span>.isiPhoneX() &#123;</div><div class="line">    adViewHeight = (<span class="number">1920</span> / <span class="number">1124</span>) * screenWidth</div><div class="line">    imageName = <span class="string">"start_page_x"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面判断是否为 iPhoneX 我是在 UIDevice 里扩展了一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">extension UIDevice &#123;</div><div class="line">    public static func isiPhoneX() -&gt; Bool &#123;</div><div class="line">        if UIScreen.main.bounds.height == 812 &#123;</div><div class="line">            return true</div><div class="line">        &#125;</div><div class="line">        return false</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>还有注意在执行销毁时调用回调方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> time: <span class="type">TimeInterval</span> = <span class="number">1.0</span></div><div class="line"><span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + time) &#123;</div><div class="line">    <span class="keyword">self</span>.dismissAdView()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 AppDelegate 中 didFinishLaunchingWithOptions 方法中调用下面的 setUpWindowAndRootView() 来管理页面展示<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUpWindowAndRootView</span><span class="params">()</span></span> &#123;</div><div class="line">        window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</div><div class="line">        window!.backgroundColor = <span class="type">UIColor</span>.white</div><div class="line">        window!.makeKeyAndVisible()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> adVC = <span class="type">AdViewController</span>()</div><div class="line">        adVC.completion = &#123;</div><div class="line">            <span class="keyword">let</span> vc = <span class="type">ViewController</span>()</div><div class="line">            vc.adView = adVC.view</div><div class="line">            <span class="keyword">self</span>.window!.rootViewController = vc</div><div class="line">        &#125;</div><div class="line">        window!.rootViewController = adVC</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意在 AdViewController 销毁的回调方法中，将 AdViewController 的 view 传给真正的首页，让首页来执行动画<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">adVC.completion = &#123;</div><div class="line">    <span class="keyword">let</span> vc = <span class="type">ViewController</span>()</div><div class="line">    <span class="comment">// 将 AdViewController 的 view 传给真正的首页，让首页来执行动画</span></div><div class="line">    vc.adView = adVC.view</div><div class="line">    <span class="keyword">self</span>.window!.rootViewController = vc</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在首页 ViewController 里我们有如下方法来执行 AdViewController 的销毁动画，这里配置的动画是常见的扩大渐变消失<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> advertiseView: <span class="type">UIView</span>?</div><div class="line"><span class="keyword">var</span> adView: <span class="type">UIView</span>? &#123;</div><div class="line">    <span class="keyword">didSet</span> &#123;</div><div class="line">        advertiseView = adView!</div><div class="line">        advertiseView?.frame = <span class="keyword">self</span>.view.bounds</div><div class="line">        <span class="keyword">self</span>.view.addSubview(advertiseView!)</div><div class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">1.5</span>, animations: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>?.advertiseView?.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">1.2</span>, y: <span class="number">1.2</span>)</div><div class="line">            <span class="keyword">self</span>?.advertiseView?.alpha = <span class="number">0</span></div><div class="line">        &#125;) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (isFinish) <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>?.advertiseView?.removeFromSuperview()</div><div class="line">            <span class="keyword">self</span>?.advertiseView = <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>至此，一个简单的启动屏动画就完成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/zyphs21/SplashAnimate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SplashAnimate&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;准备工作：&quot;&gt;&lt;a href=&quot;#准备工作：&quot; class=&quot;headerlink&quot; title=&quot;准备工作：&quot;&gt;&lt;/a&gt;准备工作：&lt;/h1&gt;&lt;p&gt;首先我们需要确定作为宣传的图片的宽高比，这个一般是与 UI 确定的。一般启动屏展示会有上下两部分，上面是宣传图片，下面是 App 的 Logo。&lt;/p&gt;
&lt;h1 id=&quot;实现基本思路：&quot;&gt;&lt;a href=&quot;#实现基本思路：&quot; class=&quot;headerlink&quot; title=&quot;实现基本思路：&quot;&gt;&lt;/a&gt;实现基本思路：&lt;/h1&gt;&lt;p&gt;在 LaunchScreen 结束后，在 AppDelegate 中将 rootViewController 指向展示广告用的 AdViewController，在AdViewController 中设置一段时间后自己销毁，并提供回调方法在 AppDelegate 中将 rootViewController 指向 App 真正的首页。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记一次失败的 Swift 元组数组实践</title>
    <link href="http://myhanson.com/2017/11/28/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%20Swift%20%E5%85%83%E7%BB%84%E6%95%B0%E7%BB%84%E5%AE%9E%E8%B7%B5/"/>
    <id>http://myhanson.com/2017/11/28/记一次失败的 Swift 元组数组实践/</id>
    <published>2017-11-28T08:01:34.000Z</published>
    <updated>2017-11-28T08:24:40.487Z</updated>
    
    <content type="html"><![CDATA[<p>想建立一个元组的数组，来简单存放构建 TabViewController 的信息首先我的做法是<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> homeTab = (vc: <span class="type">VYHomeViewController</span>(), title: <span class="string">"Home"</span>, image: <span class="string">"home_gray"</span>, selectedImage: <span class="string">"home_blue"</span>)</div><div class="line"><span class="keyword">let</span> infoTab = (vc: <span class="type">VYInformationViewController</span>(), title: <span class="string">"Info"</span>, image: <span class="string">"home_gray"</span>, selectedImage: <span class="string">"home_blue"</span>)</div><div class="line"><span class="keyword">let</span> marketTab = (vc: <span class="type">VYMarketViewController</span>(), title: <span class="string">"Market"</span>, image: <span class="string">"home_gray"</span>, selectedImage: <span class="string">"home_blue"</span>)</div><div class="line"><span class="keyword">let</span> userTab = (vc: <span class="type">VYUserCenterViewController</span>(), title: <span class="string">"Me"</span>, image: <span class="string">"home_gray"</span>, selectedImage: <span class="string">"home_blue"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 下面报错：Heterogeneous collection literal could only be inferred to '[Any]'; add explicit type annotation if this is intentional</span></div><div class="line"><span class="keyword">let</span> data = [homeTab, infoTab, marketTab, userTab]</div></pre></td></tr></table></figure></p><p>但是会报错，Xcode 的修改提示是后面添加  <code>as [Any]</code><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> data = [selfSelectedTab, infoTab, marketTab, userTab] <span class="keyword">as</span> [<span class="type">Any</span>]</div></pre></td></tr></table></figure></p><p>但是这样做已经不是原来的做一个元组数组的初衷了。无法在遍历数组的时候使用命名元组来获取信息</p><a id="more"></a><p>接着我用 <code>typealias</code> 的方法改成如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">TabInfo</span> = (vc: <span class="type">UIViewController</span>, title: <span class="type">String</span>, image: <span class="type">String</span>, selectedImage: <span class="type">String</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> tabInfo: [<span class="type">TabInfo</span>] = [<span class="type">TabInfo</span>]()</div><div class="line"><span class="keyword">let</span> homeTab = (vc: <span class="type">VYHomeViewController</span>(), title: <span class="string">"Home"</span>, image: <span class="string">"home_gray"</span>, selectedImage: <span class="string">"home_blue"</span>)</div><div class="line"><span class="keyword">let</span> infoTab = (vc: <span class="type">VYHomeViewController</span>(), title: <span class="string">"Info"</span>, image: <span class="string">"home_gray"</span>, selectedImage: <span class="string">"home_blue"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 下面报错：Cannot express tuple conversion '(vc: VYInformationViewController, title: String, image: String, selectedImage: String)' to '(vc: UIViewController, title: String, image: String, selectedImage: String)'</span></div><div class="line">tabInfo.append(homeTab)</div></pre></td></tr></table></figure></p><p>给数组添加元素的时候报错，因为元组不支持类型转换，<code>VYHomeViewController</code> 虽然继承 <code>UIViewController</code>，但是元组看来它们不是同一类型。</p><p>最后还是放弃了用元组数组的方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> homeTab = (vc: <span class="type">VYHomePageViewController</span>(), title: <span class="type">Home</span>, image: <span class="string">"new_home_gray"</span>, selectedImage: <span class="string">"new_home_blue"</span>)</div><div class="line"><span class="keyword">let</span> infoTab = (vc: <span class="type">VYInformationViewController</span>(), title: <span class="type">Info</span>, image: <span class="string">"msg_gray"</span>, selectedImage: <span class="string">"msg_blue"</span>)</div><div class="line"><span class="keyword">let</span> marketTab = (vc: <span class="type">VYMarketViewController</span>(), title: <span class="type">Market</span>, image: <span class="string">"hangqing_gray"</span>, selectedImage: <span class="string">"hangqing_blue"</span>)</div><div class="line"><span class="keyword">let</span> userTab = (vc: <span class="type">VYUserCenterViewController</span>(), title: <span class="type">Me</span>, image: <span class="string">"mine_gray"</span>, selectedImage: <span class="string">"mine_blue"</span>)</div><div class="line"></div><div class="line">addViewController(homeTab.vc, title: homeTab.title, image: homeTab.image, selectedIamge: homeTab.selectedImage)</div><div class="line">addViewController(infoTab.vc, title: infoTab.title, image: infoTab.image, selectedIamge: infoTab.selectedImage)</div><div class="line">addViewController(marketTab.vc, title: marketTab.title, image: marketTab.image, selectedIamge: marketTab.selectedImage)</div><div class="line">addViewController(userTab.vc, title: userTab.title, image: userTab.image, selectedIamge: userTab.selectedImage)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想建立一个元组的数组，来简单存放构建 TabViewController 的信息首先我的做法是&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; homeTab = (vc: &lt;span class=&quot;type&quot;&gt;VYHomeViewController&lt;/span&gt;(), title: &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;, image: &lt;span class=&quot;string&quot;&gt;&quot;home_gray&quot;&lt;/span&gt;, selectedImage: &lt;span class=&quot;string&quot;&gt;&quot;home_blue&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; infoTab = (vc: &lt;span class=&quot;type&quot;&gt;VYInformationViewController&lt;/span&gt;(), title: &lt;span class=&quot;string&quot;&gt;&quot;Info&quot;&lt;/span&gt;, image: &lt;span class=&quot;string&quot;&gt;&quot;home_gray&quot;&lt;/span&gt;, selectedImage: &lt;span class=&quot;string&quot;&gt;&quot;home_blue&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; marketTab = (vc: &lt;span class=&quot;type&quot;&gt;VYMarketViewController&lt;/span&gt;(), title: &lt;span class=&quot;string&quot;&gt;&quot;Market&quot;&lt;/span&gt;, image: &lt;span class=&quot;string&quot;&gt;&quot;home_gray&quot;&lt;/span&gt;, selectedImage: &lt;span class=&quot;string&quot;&gt;&quot;home_blue&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; userTab = (vc: &lt;span class=&quot;type&quot;&gt;VYUserCenterViewController&lt;/span&gt;(), title: &lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt;, image: &lt;span class=&quot;string&quot;&gt;&quot;home_gray&quot;&lt;/span&gt;, selectedImage: &lt;span class=&quot;string&quot;&gt;&quot;home_blue&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下面报错：Heterogeneous collection literal could only be inferred to &#39;[Any]&#39;; add explicit type annotation if this is intentional&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; data = [homeTab, infoTab, marketTab, userTab]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是会报错，Xcode 的修改提示是后面添加  &lt;code&gt;as [Any]&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; data = [selfSelectedTab, infoTab, marketTab, userTab] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是这样做已经不是原来的做一个元组数组的初衷了。无法在遍历数组的时候使用命名元组来获取信息&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自定义 UISegmentedControl 样式</title>
    <link href="http://myhanson.com/2017/05/09/%E8%87%AA%E5%AE%9A%E4%B9%89%20UISegmentedControl%20%E6%A0%B7%E5%BC%8F/"/>
    <id>http://myhanson.com/2017/05/09/自定义 UISegmentedControl 样式/</id>
    <published>2017-05-09T14:18:30.000Z</published>
    <updated>2017-11-28T08:18:52.583Z</updated>
    
    <content type="html"><![CDATA[<p>系统的 UISegmentedControl 是个挺方便的控件，这里来讲讲在 Swift3 下自定义 UISegmentedControl 的样式，包括修改底色，边框颜色等等。</p><p>要了解 UISegmentedControl 各个部分的组成，可以在官方的文档中找到 <a href="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/UIKitUICatalog/UISegmentedControl.html" target="_blank" rel="external">UISegmentedControl 文档</a> 。着重注意这个图：<br>   <img src="http://upload-images.jianshu.io/upload_images/757687-3d89e1b80b4e17b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>上面这幅图明确的列出了 UISegmentedControl 各个部分所控制的方法。下面就开始自定义吧。  </p><a id="more"></a><p>首先我们先做一个通过颜色生成图片的的一个扩展方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">renderImageWithColor</span>(<span class="title">_</span> <span class="title">color</span>: <span class="title">UIColor</span>, <span class="title">size</span>: <span class="title">CGSize</span>) -&gt; <span class="title">UIImage</span> </span>&#123;</div><div class="line">        <span class="type">UIGraphicsBeginImageContext</span>(size)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> context = <span class="type">UIGraphicsGetCurrentContext</span>() <span class="keyword">else</span> &#123;</div><div class="line">            <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line">            <span class="keyword">return</span> <span class="type">UIImage</span>()</div><div class="line">        &#125;</div><div class="line">        context.setFillColor(color.cgColor);</div><div class="line">        context.fill(<span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: size.width, height: size.height));</div><div class="line">        <span class="keyword">let</span> img = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()</div><div class="line">        <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line">        <span class="keyword">return</span> img ?? <span class="type">UIImage</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接着，我们可以为 UISegmentedControl 建立一个可以自定义颜色的扩展方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UISegmentedControl</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/// 自定义样式</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Parameters:</span></div><div class="line">    <span class="comment">///   - normalColor: 普通状态下背景色</span></div><div class="line">    <span class="comment">///   - selectedColor: 选中状态下背景色</span></div><div class="line">    <span class="comment">///   - dividerColor: 选项之间的分割线颜色</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setSegmentStyle</span><span class="params">(normalColor: UIColor, selectedColor: UIColor, dividerColor: UIColor)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> normalColorImage = <span class="type">UIImage</span>.renderImageWithColor(normalColor, size: <span class="type">CGSize</span>(width: <span class="number">1.0</span>, height: <span class="number">1.0</span>))</div><div class="line">        <span class="keyword">let</span> selectedColorImage = <span class="type">UIImage</span>.renderImageWithColor(selectedColor, size: <span class="type">CGSize</span>(width: <span class="number">1.0</span>, height: <span class="number">1.0</span>))</div><div class="line">        <span class="keyword">let</span> dividerColorImage = <span class="type">UIImage</span>.renderImageWithColor(dividerColor, size: <span class="type">CGSize</span>(width: <span class="number">1.0</span>, height: <span class="number">1.0</span>))</div><div class="line">        </div><div class="line">        setBackgroundImage(normalColorImage, <span class="keyword">for</span>: .normal, barMetrics: .<span class="keyword">default</span>)</div><div class="line">        setBackgroundImage(selectedColorImage, <span class="keyword">for</span>: .selected, barMetrics: .<span class="keyword">default</span>)</div><div class="line">        setDividerImage(dividerColorImage, forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .<span class="keyword">default</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> segAttributesNormal: <span class="type">NSDictionary</span> = [<span class="type">NSForegroundColorAttributeName</span>: <span class="type">UIColor</span>.gray, <span class="type">NSFontAttributeName</span>: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">14</span>)]</div><div class="line">        <span class="keyword">let</span> segAttributesSeleted: <span class="type">NSDictionary</span> = [<span class="type">NSForegroundColorAttributeName</span>: <span class="type">UIColor</span>.white,<span class="type">NSFontAttributeName</span>: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">14</span>)]</div><div class="line">        </div><div class="line">        <span class="comment">// 文字在两种状态下的颜色</span></div><div class="line">        setTitleTextAttributes(segAttributesNormal <span class="keyword">as</span> [<span class="type">NSObject</span> : <span class="type">AnyObject</span>], <span class="keyword">for</span>: <span class="type">UIControlState</span>.normal)</div><div class="line">        setTitleTextAttributes(segAttributesSeleted <span class="keyword">as</span> [<span class="type">NSObject</span> : <span class="type">AnyObject</span>], <span class="keyword">for</span>: <span class="type">UIControlState</span>.selected)</div><div class="line">        </div><div class="line">        <span class="comment">// 边界颜色、圆角</span></div><div class="line">        <span class="keyword">self</span>.layer.borderWidth = <span class="number">0.7</span></div><div class="line">        <span class="keyword">self</span>.layer.cornerRadius = <span class="number">5.0</span></div><div class="line">        <span class="keyword">self</span>.layer.borderColor = dividerColor.cgColor</div><div class="line">        <span class="keyword">self</span>.layer.masksToBounds = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个扩展方法我只暴露了三种颜色的修改，大家可以根据自己需求修改。<br>最后就是使用了，注意这里如果进行了自定义，不能用 autoLayout 了, 需指定 Segement 的位置大小，不然显示出来的效果被压缩成了一条线，我估计是 setBackgroundImage 的方法需要把 1x1 的颜色图片进行填充，如果不指定大小会出差错。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> segment = <span class="type">UISegmentedControl</span>(items: [<span class="string">"测试"</span>, <span class="string">"测试"</span>, <span class="string">"测试"</span>])</div><div class="line">segment.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">150</span>, height: <span class="number">40</span>)</div><div class="line">segment.setSegmentStyle(normalColor: <span class="type">UIColor</span>.clear, selectedColor: <span class="type">UIColor</span>.cyan, dividerColor: <span class="type">UIColor</span>.gray)</div><div class="line">segment.selectedSegmentIndex = <span class="number">0</span></div><div class="line">view.addSubview(segment)</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/757687-b2cff0c753e73846.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>个人比较喜欢用 extension 扩展方法，这里大家直接拷贝就能够使用了，祝大家自定义愉快吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统的 UISegmentedControl 是个挺方便的控件，这里来讲讲在 Swift3 下自定义 UISegmentedControl 的样式，包括修改底色，边框颜色等等。&lt;/p&gt;
&lt;p&gt;要了解 UISegmentedControl 各个部分的组成，可以在官方的文档中找到 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/UIKitUICatalog/UISegmentedControl.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UISegmentedControl 文档&lt;/a&gt; 。着重注意这个图：&lt;br&gt;   &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/757687-3d89e1b80b4e17b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;上面这幅图明确的列出了 UISegmentedControl 各个部分所控制的方法。下面就开始自定义吧。  &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HSStockChart介绍</title>
    <link href="http://myhanson.com/2017/05/03/HSStockChart%E4%BB%8B%E7%BB%8D/"/>
    <id>http://myhanson.com/2017/05/03/HSStockChart介绍/</id>
    <published>2017-05-03T08:53:30.000Z</published>
    <updated>2017-11-28T08:19:15.162Z</updated>
    
    <content type="html"><![CDATA[<p>HSStockChart 是一个绘制股票分时图、K 线图的库。支持流畅的回弹拖动，长按十字线，捏合放大缩小等功能，主要使用了 CAShapeLayer 来绘图，相比使用 Core Graphics 和重写 drawRect 的方法更高效，占用内存更小。<br><a href="https://github.com/zyphs21/HSStockChart" target="_blank" rel="external">GitHub 地址：HSStockChart</a>  </p><p><img src="http://upload-images.jianshu.io/upload_images/757687-92b2069869929ccd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><a id="more"></a><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li style="list-style: none"><input type="checkbox" checked> 支持绘制分时图，五日分时图，K 线图，MA 线指标，交易量柱等。</li><li style="list-style: none"><input type="checkbox" checked> 支持横屏查看。</li><li style="list-style: none"><input type="checkbox" checked> K 线图利用 <code>UIScrollView</code> 达到流畅的滑动查看效果。</li><li style="list-style: none"><input type="checkbox" checked> 使用 <code>CAShapeLayer</code> 绘图，内存占用更小，效率更高。</li></ul><h2 id="版本需求"><a href="#版本需求" class="headerlink" title="版本需求"></a>版本需求</h2><ul><li>iOS 8.0+</li><li>Swift 3</li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li><p>之前绘图的方法是重写 <code>drawRect</code> 方法，在方法里获取 <code>CGContext</code> 然后利用Core Graphics 来进行绘图，调用 <code>setNeedsDisplay</code> 来刷新。但是这种方法有个问题是：</p><blockquote><p>一旦你实现了 CALayerDelegate 协议中的 -drawLayer:inContext: 方法或者 UIView 中的 -drawRect: 方法（其实就是前者的包装方法），图层就创建了一个绘制上下文，这个上下文需要的内存可从这个公式得出：图层宽x图层高x4字节，宽高的单位均为像素。对于一个在 Retina iPad 上的全屏图层来说，这个内存量就是 2048x1526x4字节，相当于12MB内存，图层每次重绘的时候都需要重新抹掉内存然后重新分配。【摘自 iOS Core Animation- Advanced Techniques 中文译本 高效绘图一章】</p></blockquote><p>因为我要达到流畅滑动查看的效果，所以在 <code>UIScrollView</code> 上添加了一个 <code>UIView</code> 这个 View 的宽度会依据当前展示数据的多少而变化，结合 <code>UIScrollView</code> 的 <code>ContentSize</code> 就能达到很好的滑动效果。</p><p><img src="http://upload-images.jianshu.io/upload_images/757687-36a3d278fd71fc4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>如果我用之前重写 <code>drawRect</code> 的方法，那么这个 View 会根据数据量的变大而变大，从而导致绘图内存急剧上升，数据量大的时候会崩溃。基于此，我采用了 <code>CAShapeLayer</code> 的方式绘图，此方式的特点如下：</p><blockquote><p>CAShapeLayer 是一个通过矢量图形而不是 bitmap 来绘制的图层子类。你指定诸如颜色和线宽等属性，用 CGPath 来定义想要绘制的图形，最后就自动渲染出来了。当然，你也可以用 Core Graphics 直接向原始的内容中绘制一个路径，相比之下，使用 CAShapeLayer 有以下一些优点:</p><ul><li>渲染快速。CAShapeLayer 使用了硬件加速，绘制同一图形会比用 Core Graphics 快很多。</li><li>高效使用内存。一个 CAShapeLayer 不需要像普通 CALayer 一样创建一个寄宿图形，所以无论有多大，都不会占用太多的内存。 </li><li>不会被图层边界剪裁掉，一个 CAShapeLayer 可以在边界之外绘制。你的图层路径不会像在使用 Core Graphics 的普通 CALayer 一样被剪裁掉。</li><li>不会出现像素化。当你给 CAShapeLayer 做3D变换时，它不像一个有寄宿图的普通图层一样变得像素化</li></ul></blockquote><p>最终在真机上测试(注意是在真机上测试)两种方式的结果如图，内存大大降低并且稳定在13M左右</p><p> <img src="http://upload-images.jianshu.io/upload_images/757687-a773aeda8ac7ff01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>自定义 CAShapeLayer，重写 action(forKey event: String) 方法。目的是 关闭 CAShapeLayer 的隐式动画，避免滑动时候或者十字线出现时有残影的现象(实际上是因为 Layer 的 position 属性变化而产生的隐式动画)</p></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HSCAShapeLayer</span>: <span class="title">CAShapeLayer</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">action</span><span class="params">(forKey event: String)</span></span> -&gt; <span class="type">CAAction</span>? &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Released under MIT License.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HSStockChart 是一个绘制股票分时图、K 线图的库。支持流畅的回弹拖动，长按十字线，捏合放大缩小等功能，主要使用了 CAShapeLayer 来绘图，相比使用 Core Graphics 和重写 drawRect 的方法更高效，占用内存更小。&lt;br&gt;&lt;a href=&quot;https://github.com/zyphs21/HSStockChart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub 地址：HSStockChart&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/757687-92b2069869929ccd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
